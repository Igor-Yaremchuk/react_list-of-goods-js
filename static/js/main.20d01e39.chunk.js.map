{"version":3,"sources":["App.jsx","index.jsx"],"names":["goodsFromServer","SORT_FIELD","App","useState","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","prepearedGoods","sort","good1","good2","localeCompare","length","reverse","getPrepearedGoods","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"mPAKaA,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGIC,EACE,OADFA,EAEM,WAFNA,EAGI,SA4BH,IAAMC,EAAM,WACjB,MAAkCC,mBAASF,GAA3C,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KACMC,EA5BR,SAA2BC,EAA3B,GAA8D,IAA1BL,EAAyB,EAAzBA,UAAWE,EAAc,EAAdA,WACvCI,EAAc,YAAOD,GAiB3B,OAfIL,GACFM,EAAeC,MAAK,SAACC,EAAOC,GAC1B,OAAQT,GACN,KAAKH,EACH,OAAOW,EAAME,cAAcD,GAE7B,KAAKZ,EACH,OAAOW,EAAMG,OAASF,EAAME,OAE9B,QACE,OAAO,MAKXT,EACKI,EAAeM,UAGjBN,EAMcO,CACnBjB,EACA,CAAEI,YAAWE,eAGf,OACE,sBAAKY,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,iBACA,CACE,WAAYhB,IAAcH,IAG9BoB,QAAS,kBAAMhB,EAAaJ,IAR9B,iCAaA,wBACEkB,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,WAAYhB,IAAcH,IAG9BoB,QAAS,kBAAMhB,EAAaJ,IAR9B,4BAaA,wBACEkB,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,YAAad,IAGjBe,QAAS,kBAAMd,GAAeD,IARhC,sBAaEF,IAAcH,GAAmBK,IACjC,wBACEa,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPhB,EAAaJ,GACbM,GAAc,IALlB,sBAaJ,6BACGC,EAAac,KAAI,SAAAC,GAAI,OACpB,oBAAe,UAAQ,OAAvB,SAA+BA,GAAtBA,YChHnBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.20d01e39.chunk.js","sourcesContent":["import 'bulma/css/bulma.css';\nimport classNames from 'classnames';\nimport { useState } from 'react';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nconst SORT_FIELD = {\n  NONE: 'NONE',\n  ALPHABET: 'ALPHABET',\n  LENGTH: 'LENGTH',\n};\n\nfunction getPrepearedGoods(goods, { sortField, isReversed }) {\n  const prepearedGoods = [...goods];\n\n  if (sortField) {\n    prepearedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SORT_FIELD.ALPHABET:\n          return good1.localeCompare(good2);\n\n        case SORT_FIELD.LENGTH:\n          return good1.length - good2.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    return prepearedGoods.reverse();\n  }\n\n  return prepearedGoods;\n}\n\nexport const App = () => {\n  const [sortField, setSortField] = useState(SORT_FIELD.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n  const visibleGoods = getPrepearedGoods(\n    goodsFromServer,\n    { sortField, isReversed },\n  );\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info',\n            {\n              'is-light': sortField !== SORT_FIELD.ALPHABET,\n            },\n          )}\n          onClick={() => setSortField(SORT_FIELD.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success',\n            {\n              'is-light': sortField !== SORT_FIELD.LENGTH,\n            },\n          )}\n          onClick={() => setSortField(SORT_FIELD.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortField !== SORT_FIELD.NONE || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortField(SORT_FIELD.NONE);\n              setIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li key={good} data-cy=\"Good\">{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}